name: actions
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 22 */3 * *

env:
  REPO_URL: https://github.com/zhx47/bakup.git
  REPO_BRANCH: master
  IMAGE_NAME: jd_h5st_server
  REGISTRY: youfak

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      # 检出你的 fork 仓库代码
      - name: Checkout fork repository
        uses: actions/checkout@v2
 
      # 拉取上游仓库的最新更改
      - name: Fetch upstream changes
        run: |
          git fetch upstream
 
      # 检查是否有新的提交（这里只是一个简单的检查，实际上你可能需要更复杂的逻辑来处理合并）
      - name: Check for new commits
        run: |
          upstream_commit=$(git rev-parse upstream/main)
          current_commit=$(git rev-parse HEAD)

          if [ "$upstream_commit" != "$current_commit" ]; then
            echo "New commits found in upstream. Preparing to merge..."
          else
            echo "No new commits found in upstream."
          fi
      - name: 检查服务器情况
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
      - name: 创建工作目录
        run: |
          sudo mkdir /workdir
          sudo mkdir /workdir/jdServer
          sudo chmod 777 /workdir/jdServer
      - name: 下载固件源码
        working-directory: /workdir
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $REPO_URL -b $REPO_BRANCH jdServer
          ln -sf /workdir/jdServer $GITHUB_WORKSPACE/jdServer
      - name: 进入源码目录
        run: cd jdServer 
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录到DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 提供 docker 元数据，构建 docker images tag 时使用
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha  

      - name: 编译镜像并推送hub
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # - name: Build Docker Image
      #   uses: docker/setup-buildx-action@v2
      #   run: |
      #     docker buildx build --platform linux/amd64,linux/arm64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --push .
